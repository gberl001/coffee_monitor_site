<%- include('partials/header.ejs') %>

<body>
<!--The background div-->
<div class="bg container-fluid">
    <!-- Row 1, two cards-->
    <div class="row">
        <div class="col-sm-4">
            <div class="card">
                <div class="card-body">
                    <h5>Cups Remaining</h5>
                    <div class="progress">
                        <div class="progress-bar progress-bar-striped progress-bar-animated" role="progressbar"
                             aria-valuenow="75" aria-valuemin="0" aria-valuemax="100" style="width: <%= pct_remaining %>"></div>
                    </div>
                    <h5 class="card-title"><%= cups_remaining %></h5>
                </div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Age</h5>
                    <p class="card-text" id="clock"><%= age %></p>
                </div>
            </div>
        </div>
    </div>

    <!-- Row 2, Graph card -->
    <div class="row">
        <div class="col-sm-12">
            <div class="card chart">
                <div class="card-header">
                    Coffee To Date
                </div>
                <div class="card-body" id="daily_chart">
                    <!-- Chart ends up here -->
                </div>
            </div>
        </div>
    </div>
</div>
<script>
    // import * as d3 from "d3";

    var label = d3.select(".label");

    // Set the dimensions of the canvas / graph
    var divWidth = document.getElementById("daily_chart").offsetWidth
    // Can use window.innerWidth instead of div width
    // console.log("WxH is " + divWidth + "x" + divHeight)
    var margin = {top: 30, right: 20, bottom: 30, left: 20},
        width = divWidth - margin.left - margin.right,
        height = 500 - margin.top - margin.bottom;

    // Parse the date / time
    var parseDate = d3.timeParse("%Y/%m/%d %I:%M %p");

    // Set the ranges
    // var x = d3.scaleTime().range([0, width]);
    // var y = d3.scaleLinear().range([height, 0]);

    // // Define the axes
    // var xAxis = d3.svg.axis().scale(x)
    //     .orient("bottom").ticks(5);
    //
    // var yAxis = d3.svg.axis().scale(y)
    //     .orient("left").ticks(5);

    // Define the line
    // var valueline = d3.svg.line()
    //     .x(function (d) {
    //         return x(d.date);
    //     })
    //     .y(function (d) {
    //         return y(d.value);
    //     });

    // Adds the svg canvas
    // append the svg object to the body of the page
    var svg = d3.select("#daily_chart")
        .append("svg")
        // .attr("preserveAspectRatio", "xMinYMin meet")
        // .attr("viewBox", "0 0 800 500")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform",
            "translate(" + margin.left + "," + margin.top + ")");

    // Make the background color
    svg.append("rect")
        .attr("width", "100%")
        .attr("height", "100%")
        .attr("opacity", 0)
    // Get the data
    d3.csv("lib/readings_test.csv", function (error, data) {

        // Convert strings to date and number
        console.log(parseDate(data[0].date) + ' - ' + data[0].value);
        data.forEach(function (d) {
            d.date = parseDate(d.date);
            d.value = +d.value;
        });

        // Add X axis --> it is a date format
        var x = d3.scaleTime()
            .domain(d3.extent(data, function (d) {
                return d.date;
            }))
            .range([0, width]);
        var xAxis = svg.append("g")
            .attr("transform", "translate(0," + height + ")")
            .call(d3.axisBottom(x));

        // Add Y axis
        var y = d3.scaleLinear()
            .domain([0, d3.max(data, function (d) {
                return +d.value;
            })])
            .range([height, 0]);
        var yAxis = svg.append("g")
            .call(d3.axisLeft(y));

        // // Add a clipPath: everything out of this area won't be drawn.
        // var clip = svg.append("defs").append("svg:clipPath")
        //     .attr("id", "clip")
        //     .append("svg:rect")
        //     .attr("width", width)
        //     .attr("height", height)
        //     .attr("x", 0)
        //     .attr("y", 0);

        // Add brushing
        var brush = d3.brushX()                   // Add the brush feature using the d3.brush function
            .extent([[0, 0], [width, height]])  // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area
            .on("end", updateChart);               // Each time the brush selection changes, trigger the 'updateChart' function

        // Create the line variable: where both the line and the brush take place
        var line = svg.append('g')
            .attr("clip-path", "url(#clip)");

        // Add the line
        line.append("path")
            .datum(data)
            .attr("class", "line")  // I add the class line to be able to modify this line later on.
            .attr("fill", "none")
            .attr("stroke", "steelblue")
            .attr("stroke-width", 1.5)
            .attr("d", d3.line()
                .x(function (d) {
                    return x(d.date)
                })
                .y(function (d) {
                    return y(d.value)
                })
            );

        // Add the brushing
        line
            .append("g")
            .attr("class", "brush")
            .call(brush);

        // A function that set idleTimeOut to null
        var idleTimeout;

        function idled() {
            idleTimeout = null;
        }

        // A function that update the chart for given boundaries
        function updateChart() {

            // What are the selected boundaries?
            extent = d3.event.selection;

            // If no selection, back to initial coordinate. Otherwise, update X axis domain
            if (!extent) {
                if (!idleTimeout) return idleTimeout = setTimeout(idled, 350); // This allows to wait a little bit
                x.domain([4, 8])
            } else {
                x.domain([x.invert(extent[0]), x.invert(extent[1])]);
                line.select(".brush").call(brush.move, null) // This remove the grey brush area as soon as the selection has been done
            }

            // Update axis and line position
            xAxis.transition().duration(1000).call(d3.axisBottom(x));
            line
                .select('.line')
                .transition()
                .duration(1000)
                .attr("d", d3.line()
                    .x(function (d) {
                        return x(d.date)
                    })
                    .y(function (d) {
                        return y(d.value)
                    })
                )
        }

        // If user double click, reinitialize the chart
        svg.on("dblclick", function () {
            x.domain(d3.extent(data, function (d) {
                return d.date;
            }));
            xAxis.transition().call(d3.axisBottom(x));
            line
                .select('.line')
                .transition()
                .attr("d", d3.line()
                    .x(function (d) {
                        return x(d.date)
                    })
                    .y(function (d) {
                        return y(d.value)
                    })
                )
        });

    });

</script>
</body>